# -*- coding: utf-8 -*-
"""t3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/158SqdWNG-QbcjRHWn0oeHVc861qtyTw-
"""

# -*- coding: utf-8 -*-
"""t2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/158SqdWNG-QbcjRHWn0oeHVc861qtyTw-
"""

from airflow import DAG
from airflow.decorators import task
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook
from airflow.models import Variable
from datetime import datetime, timedelta
import requests
import logging
import json

# Default arguments for the DAG
default_args = {
    'owner': 'Project',
    'start_date': datetime(2024, 11, 29),
    'retries': 0,
    'retry_delay': timedelta(minutes=5),
    'email_on_failure': True,
    'email_on_retry': False,
}

def get_snowflake_conn():
    """Get Snowflake connection."""
    snowflake_hook = SnowflakeHook(snowflake_conn_id='my_snowflake_conn')
    return snowflake_hook.get_conn()

with DAG(
    dag_id='historical_load_with_timestamp_1',
    default_args=default_args,
    schedule_interval='0 18 * * *',
    catchup=False
) as dag:

    @task(task_id='fetch_last_1year_price')
    def fetch_last_1year_price(symbol):
        """Fetch historical stock price data from Alpha Vantage."""
        api_key = Variable.get('vantage_api_key')
        url = f'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={symbol}&apikey={api_key}&outputsize=full'
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        if 'Time Series (Daily)' not in data:
            raise ValueError(f"Invalid API response: {data.get('Error Message', 'Unknown error')}")

        # Calculate the cutoff date for the last 1 year
        cutoff_date = datetime.now() - timedelta(days=365)
        results = []
        for date, stockinfo in data['Time Series (Daily)'].items():
            if datetime.strptime(date, '%Y-%m-%d') >= cutoff_date:
                results.append({
                    'date': date,
                    'open': stockinfo['1. open'],
                    'high': stockinfo['2. high'],
                    'low': stockinfo['3. low'],
                    'close': stockinfo['4. close'],
                    'volume': stockinfo['5. volume']
                })

        return json.dumps(results)

    @task(task_id='create_table')
    def create_table():
        """Create the Snowflake table with a timestamp column."""
        conn = get_snowflake_conn()
        create_table_query = """
        CREATE OR REPLACE TABLE project.data226.stockprice_historical (
            open FLOAT,
            high FLOAT,
            low FLOAT,
            close FLOAT,
            volume BIGINT,
            date DATE PRIMARY KEY,
            load_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """
        with conn.cursor() as cur:
            cur.execute(create_table_query)
        conn.close()

    @task(task_id='insert_data')
    def insert_data(serialized_data):
        """Insert data into Snowflake table with load timestamp."""
        data = json.loads(serialized_data)
        if not data:
            raise ValueError("No data received from API")

        conn = get_snowflake_conn()
        with conn.cursor() as cur:
            insert_query = """
            INSERT INTO project.data226.stockprice_historical
            (date, open, high, low, close, volume, load_timestamp)
            VALUES (%(date)s, %(open)s, %(high)s, %(low)s, %(close)s, %(volume)s, CURRENT_TIMESTAMP)
            """
            for record in data:
                cur.execute(insert_query, {
                    'date': record['date'],
                    'open': float(record['open']),
                    'high': float(record['high']),
                    'low': float(record['low']),
                    'close': float(record['close']),
                    'volume': int(record['volume']),
                })
            conn.commit()
        conn.close()

    stock_prices = fetch_last_1year_price('MSFT')
    create_table_task = create_table()
    insert_data_task = insert_data(stock_prices)

    create_table_task >> insert_data_task